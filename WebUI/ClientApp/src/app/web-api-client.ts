/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IKlienciClient {
    pobierzKlientow(offset: number | undefined, rows: number | undefined, sortField: string | null | undefined, sortOrder: number | undefined): Observable<PagedResultOfKlientDto>;
    utworzKlienta(command: UtworzKlientaCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class KlienciClient implements IKlienciClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzKlientow(offset: number | undefined, rows: number | undefined, sortField: string | null | undefined, sortOrder: number | undefined): Observable<PagedResultOfKlientDto> {
        let url_ = this.baseUrl + "/api/klienci?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (rows === null)
            throw new Error("The parameter 'rows' cannot be null.");
        else if (rows !== undefined)
            url_ += "Rows=" + encodeURIComponent("" + rows) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortOrder === null)
            throw new Error("The parameter 'sortOrder' cannot be null.");
        else if (sortOrder !== undefined)
            url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzKlientow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzKlientow(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfKlientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfKlientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzKlientow(response: HttpResponseBase): Observable<PagedResultOfKlientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfKlientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfKlientDto>(<any>null);
    }

    utworzKlienta(command: UtworzKlientaCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/klienci";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUtworzKlienta(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUtworzKlienta(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUtworzKlienta(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IKrajeClient {
    pobierzKraje(sortField: string | null | undefined, sortOrder: number | undefined): Observable<KrajDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class KrajeClient implements IKrajeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzKraje(sortField: string | null | undefined, sortOrder: number | undefined): Observable<KrajDto[]> {
        let url_ = this.baseUrl + "/api/kraje?";
        if (sortField !== undefined && sortField !== null)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortOrder === null)
            throw new Error("The parameter 'sortOrder' cannot be null.");
        else if (sortOrder !== undefined)
            url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzKraje(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzKraje(<any>response_);
                } catch (e) {
                    return <Observable<KrajDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<KrajDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzKraje(response: HttpResponseBase): Observable<KrajDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(KrajDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KrajDto[]>(<any>null);
    }
}

export interface IStatusyMisjiClient {
    pobierzStatusyMisji(): Observable<StatusMisjiDto[]>;
    pobierzStatusMisji(nazwa: string | null): Observable<StatusMisjiDto>;
}

@Injectable({
    providedIn: 'root'
})
export class StatusyMisjiClient implements IStatusyMisjiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzStatusyMisji(): Observable<StatusMisjiDto[]> {
        let url_ = this.baseUrl + "/api/statusymisji";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzStatusyMisji(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzStatusyMisji(<any>response_);
                } catch (e) {
                    return <Observable<StatusMisjiDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<StatusMisjiDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzStatusyMisji(response: HttpResponseBase): Observable<StatusMisjiDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StatusMisjiDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StatusMisjiDto[]>(<any>null);
    }

    pobierzStatusMisji(nazwa: string | null): Observable<StatusMisjiDto> {
        let url_ = this.baseUrl + "/api/statusymisji/{nazwa}";
        if (nazwa === undefined || nazwa === null)
            throw new Error("The parameter 'nazwa' must be defined.");
        url_ = url_.replace("{nazwa}", encodeURIComponent("" + nazwa));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzStatusMisji(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzStatusMisji(<any>response_);
                } catch (e) {
                    return <Observable<StatusMisjiDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StatusMisjiDto>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzStatusMisji(response: HttpResponseBase): Observable<StatusMisjiDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StatusMisjiDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StatusMisjiDto>(<any>null);
    }
}

export interface IStatusyUslugiClient {
    pobierzStatusUslugi(nazwa: string | null): Observable<StatusUslugiDto>;
}

@Injectable({
    providedIn: 'root'
})
export class StatusyUslugiClient implements IStatusyUslugiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzStatusUslugi(nazwa: string | null): Observable<StatusUslugiDto> {
        let url_ = this.baseUrl + "/api/statusyuslugi/{nazwa}";
        if (nazwa === undefined || nazwa === null)
            throw new Error("The parameter 'nazwa' must be defined.");
        url_ = url_.replace("{nazwa}", encodeURIComponent("" + nazwa));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzStatusUslugi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzStatusUslugi(<any>response_);
                } catch (e) {
                    return <Observable<StatusUslugiDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<StatusUslugiDto>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzStatusUslugi(response: HttpResponseBase): Observable<StatusUslugiDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StatusUslugiDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StatusUslugiDto>(<any>null);
    }
}

export interface ITypyMisjiClient {
    pobierzTypyMisji(): Observable<TypMisjiDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class TypyMisjiClient implements ITypyMisjiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzTypyMisji(): Observable<TypMisjiDto[]> {
        let url_ = this.baseUrl + "/api/typymisji";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzTypyMisji(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzTypyMisji(<any>response_);
                } catch (e) {
                    return <Observable<TypMisjiDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TypMisjiDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzTypyMisji(response: HttpResponseBase): Observable<TypMisjiDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TypMisjiDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TypMisjiDto[]>(<any>null);
    }
}

export interface IUslugiClient {
    pobierzUslugi(): Observable<UslugaDto[]>;
    utworzUsluge(command: UtworzUslugeCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class UslugiClient implements IUslugiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    pobierzUslugi(): Observable<UslugaDto[]> {
        let url_ = this.baseUrl + "/api/uslugi";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPobierzUslugi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPobierzUslugi(<any>response_);
                } catch (e) {
                    return <Observable<UslugaDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UslugaDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processPobierzUslugi(response: HttpResponseBase): Observable<UslugaDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UslugaDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UslugaDto[]>(<any>null);
    }

    utworzUsluge(command: UtworzUslugeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/uslugi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUtworzUsluge(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUtworzUsluge(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUtworzUsluge(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class PagedResultBase implements IPagedResultBase {
    rowCount?: number;

    constructor(data?: IPagedResultBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rowCount = _data["rowCount"];
        }
    }

    static fromJS(data: any): PagedResultBase {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowCount"] = this.rowCount;
        return data; 
    }
}

export interface IPagedResultBase {
    rowCount?: number;
}

export class PagedResultOfKlientDto extends PagedResultBase implements IPagedResultOfKlientDto {
    results?: KlientDto[] | undefined;

    constructor(data?: IPagedResultOfKlientDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(KlientDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfKlientDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfKlientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPagedResultOfKlientDto extends IPagedResultBase {
    results?: KlientDto[] | undefined;
}

export class KlientDto implements IKlientDto {
    id?: string;
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    miejscowosc?: string | undefined;
    gmina?: string | undefined;
    dzielnica?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    kraj?: KrajDto | undefined;
    zagranicznyKodPocztowy?: string | undefined;
    email?: string | undefined;

    constructor(data?: IKlientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imie = _data["imie"];
            this.nazwisko = _data["nazwisko"];
            this.nazwa = _data["nazwa"];
            this.pesel = _data["pesel"];
            this.regon = _data["regon"];
            this.nip = _data["nip"];
            this.numerPaszportu = _data["numerPaszportu"];
            this.numerTelefonu = _data["numerTelefonu"];
            this.kodPocztowy = _data["kodPocztowy"];
            this.miejscowosc = _data["miejscowosc"];
            this.gmina = _data["gmina"];
            this.dzielnica = _data["dzielnica"];
            this.ulica = _data["ulica"];
            this.numerDomu = _data["numerDomu"];
            this.numerLokalu = _data["numerLokalu"];
            this.kraj = _data["kraj"] ? KrajDto.fromJS(_data["kraj"]) : <any>undefined;
            this.zagranicznyKodPocztowy = _data["zagranicznyKodPocztowy"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): KlientDto {
        data = typeof data === 'object' ? data : {};
        let result = new KlientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imie"] = this.imie;
        data["nazwisko"] = this.nazwisko;
        data["nazwa"] = this.nazwa;
        data["pesel"] = this.pesel;
        data["regon"] = this.regon;
        data["nip"] = this.nip;
        data["numerPaszportu"] = this.numerPaszportu;
        data["numerTelefonu"] = this.numerTelefonu;
        data["kodPocztowy"] = this.kodPocztowy;
        data["miejscowosc"] = this.miejscowosc;
        data["gmina"] = this.gmina;
        data["dzielnica"] = this.dzielnica;
        data["ulica"] = this.ulica;
        data["numerDomu"] = this.numerDomu;
        data["numerLokalu"] = this.numerLokalu;
        data["kraj"] = this.kraj ? this.kraj.toJSON() : <any>undefined;
        data["zagranicznyKodPocztowy"] = this.zagranicznyKodPocztowy;
        data["email"] = this.email;
        return data; 
    }
}

export interface IKlientDto {
    id?: string;
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    miejscowosc?: string | undefined;
    gmina?: string | undefined;
    dzielnica?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    kraj?: KrajDto | undefined;
    zagranicznyKodPocztowy?: string | undefined;
    email?: string | undefined;
}

export class KrajDto implements IKrajDto {
    id?: string;
    nazwaKraju?: string | undefined;
    skrot?: string | undefined;

    constructor(data?: IKrajDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwaKraju = _data["nazwaKraju"];
            this.skrot = _data["skrot"];
        }
    }

    static fromJS(data: any): KrajDto {
        data = typeof data === 'object' ? data : {};
        let result = new KrajDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwaKraju"] = this.nazwaKraju;
        data["skrot"] = this.skrot;
        return data; 
    }
}

export interface IKrajDto {
    id?: string;
    nazwaKraju?: string | undefined;
    skrot?: string | undefined;
}

export class UtworzKlientaCommand implements IUtworzKlientaCommand {
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    idKraju?: string;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    miejscowosc?: string | undefined;
    email?: string | undefined;

    constructor(data?: IUtworzKlientaCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.imie = _data["imie"];
            this.nazwisko = _data["nazwisko"];
            this.nazwa = _data["nazwa"];
            this.idKraju = _data["idKraju"];
            this.pesel = _data["pesel"];
            this.regon = _data["regon"];
            this.nip = _data["nip"];
            this.numerPaszportu = _data["numerPaszportu"];
            this.numerTelefonu = _data["numerTelefonu"];
            this.kodPocztowy = _data["kodPocztowy"];
            this.ulica = _data["ulica"];
            this.numerDomu = _data["numerDomu"];
            this.numerLokalu = _data["numerLokalu"];
            this.miejscowosc = _data["miejscowosc"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UtworzKlientaCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UtworzKlientaCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["imie"] = this.imie;
        data["nazwisko"] = this.nazwisko;
        data["nazwa"] = this.nazwa;
        data["idKraju"] = this.idKraju;
        data["pesel"] = this.pesel;
        data["regon"] = this.regon;
        data["nip"] = this.nip;
        data["numerPaszportu"] = this.numerPaszportu;
        data["numerTelefonu"] = this.numerTelefonu;
        data["kodPocztowy"] = this.kodPocztowy;
        data["ulica"] = this.ulica;
        data["numerDomu"] = this.numerDomu;
        data["numerLokalu"] = this.numerLokalu;
        data["miejscowosc"] = this.miejscowosc;
        data["email"] = this.email;
        return data; 
    }
}

export interface IUtworzKlientaCommand {
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    idKraju?: string;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    miejscowosc?: string | undefined;
    email?: string | undefined;
}

export class StatusMisjiDto implements IStatusMisjiDto {
    id?: string;
    nazwa?: string | undefined;

    constructor(data?: IStatusMisjiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
        }
    }

    static fromJS(data: any): StatusMisjiDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatusMisjiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        return data; 
    }
}

export interface IStatusMisjiDto {
    id?: string;
    nazwa?: string | undefined;
}

export class StatusUslugiDto implements IStatusUslugiDto {
    id?: string;
    nazwa?: string | undefined;

    constructor(data?: IStatusUslugiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
        }
    }

    static fromJS(data: any): StatusUslugiDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatusUslugiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        return data; 
    }
}

export interface IStatusUslugiDto {
    id?: string;
    nazwa?: string | undefined;
}

export class TypMisjiDto implements ITypMisjiDto {
    id?: string;
    nazwa?: string | undefined;

    constructor(data?: ITypMisjiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
        }
    }

    static fromJS(data: any): TypMisjiDto {
        data = typeof data === 'object' ? data : {};
        let result = new TypMisjiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        return data; 
    }
}

export interface ITypMisjiDto {
    id?: string;
    nazwa?: string | undefined;
}

export class UslugaDto implements IUslugaDto {
    id?: string;
    dataPrzyjeciaZlecenia?: number;
    klient?: KlientDto | undefined;
    statusUslugi?: StatusUslugi | undefined;
    misje?: MisjaDto[] | undefined;

    constructor(data?: IUslugaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dataPrzyjeciaZlecenia = _data["dataPrzyjeciaZlecenia"];
            this.klient = _data["klient"] ? KlientDto.fromJS(_data["klient"]) : <any>undefined;
            this.statusUslugi = _data["statusUslugi"] ? StatusUslugi.fromJS(_data["statusUslugi"]) : <any>undefined;
            if (Array.isArray(_data["misje"])) {
                this.misje = [] as any;
                for (let item of _data["misje"])
                    this.misje!.push(MisjaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UslugaDto {
        data = typeof data === 'object' ? data : {};
        let result = new UslugaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataPrzyjeciaZlecenia"] = this.dataPrzyjeciaZlecenia;
        data["klient"] = this.klient ? this.klient.toJSON() : <any>undefined;
        data["statusUslugi"] = this.statusUslugi ? this.statusUslugi.toJSON() : <any>undefined;
        if (Array.isArray(this.misje)) {
            data["misje"] = [];
            for (let item of this.misje)
                data["misje"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUslugaDto {
    id?: string;
    dataPrzyjeciaZlecenia?: number;
    klient?: KlientDto | undefined;
    statusUslugi?: StatusUslugi | undefined;
    misje?: MisjaDto[] | undefined;
}

export class StatusUslugi implements IStatusUslugi {
    id?: string;
    nazwa?: string | undefined;
    uslugi?: Usluga[] | undefined;

    constructor(data?: IStatusUslugi) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
            if (Array.isArray(_data["uslugi"])) {
                this.uslugi = [] as any;
                for (let item of _data["uslugi"])
                    this.uslugi!.push(Usluga.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StatusUslugi {
        data = typeof data === 'object' ? data : {};
        let result = new StatusUslugi();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        if (Array.isArray(this.uslugi)) {
            data["uslugi"] = [];
            for (let item of this.uslugi)
                data["uslugi"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStatusUslugi {
    id?: string;
    nazwa?: string | undefined;
    uslugi?: Usluga[] | undefined;
}

export class Usluga implements IUsluga {
    id?: string;
    dataPrzyjeciaZlecenia?: Date;
    idKlienta?: string;
    idStatusuUslugi?: string;
    klient?: Klient | undefined;
    statusUslugi?: StatusUslugi | undefined;
    misje?: Misja[] | undefined;

    constructor(data?: IUsluga) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dataPrzyjeciaZlecenia = _data["dataPrzyjeciaZlecenia"] ? new Date(_data["dataPrzyjeciaZlecenia"].toString()) : <any>undefined;
            this.idKlienta = _data["idKlienta"];
            this.idStatusuUslugi = _data["idStatusuUslugi"];
            this.klient = _data["klient"] ? Klient.fromJS(_data["klient"]) : <any>undefined;
            this.statusUslugi = _data["statusUslugi"] ? StatusUslugi.fromJS(_data["statusUslugi"]) : <any>undefined;
            if (Array.isArray(_data["misje"])) {
                this.misje = [] as any;
                for (let item of _data["misje"])
                    this.misje!.push(Misja.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Usluga {
        data = typeof data === 'object' ? data : {};
        let result = new Usluga();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataPrzyjeciaZlecenia"] = this.dataPrzyjeciaZlecenia ? this.dataPrzyjeciaZlecenia.toISOString() : <any>undefined;
        data["idKlienta"] = this.idKlienta;
        data["idStatusuUslugi"] = this.idStatusuUslugi;
        data["klient"] = this.klient ? this.klient.toJSON() : <any>undefined;
        data["statusUslugi"] = this.statusUslugi ? this.statusUslugi.toJSON() : <any>undefined;
        if (Array.isArray(this.misje)) {
            data["misje"] = [];
            for (let item of this.misje)
                data["misje"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUsluga {
    id?: string;
    dataPrzyjeciaZlecenia?: Date;
    idKlienta?: string;
    idStatusuUslugi?: string;
    klient?: Klient | undefined;
    statusUslugi?: StatusUslugi | undefined;
    misje?: Misja[] | undefined;
}

export class Klient implements IKlient {
    id?: string;
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    miejscowosc?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    idKraju?: string;
    email?: string | undefined;
    kraj?: Kraj | undefined;
    uslugi?: Usluga[] | undefined;

    constructor(data?: IKlient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imie = _data["imie"];
            this.nazwisko = _data["nazwisko"];
            this.nazwa = _data["nazwa"];
            this.pesel = _data["pesel"];
            this.regon = _data["regon"];
            this.nip = _data["nip"];
            this.numerPaszportu = _data["numerPaszportu"];
            this.numerTelefonu = _data["numerTelefonu"];
            this.kodPocztowy = _data["kodPocztowy"];
            this.miejscowosc = _data["miejscowosc"];
            this.ulica = _data["ulica"];
            this.numerDomu = _data["numerDomu"];
            this.numerLokalu = _data["numerLokalu"];
            this.idKraju = _data["idKraju"];
            this.email = _data["email"];
            this.kraj = _data["kraj"] ? Kraj.fromJS(_data["kraj"]) : <any>undefined;
            if (Array.isArray(_data["uslugi"])) {
                this.uslugi = [] as any;
                for (let item of _data["uslugi"])
                    this.uslugi!.push(Usluga.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Klient {
        data = typeof data === 'object' ? data : {};
        let result = new Klient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imie"] = this.imie;
        data["nazwisko"] = this.nazwisko;
        data["nazwa"] = this.nazwa;
        data["pesel"] = this.pesel;
        data["regon"] = this.regon;
        data["nip"] = this.nip;
        data["numerPaszportu"] = this.numerPaszportu;
        data["numerTelefonu"] = this.numerTelefonu;
        data["kodPocztowy"] = this.kodPocztowy;
        data["miejscowosc"] = this.miejscowosc;
        data["ulica"] = this.ulica;
        data["numerDomu"] = this.numerDomu;
        data["numerLokalu"] = this.numerLokalu;
        data["idKraju"] = this.idKraju;
        data["email"] = this.email;
        data["kraj"] = this.kraj ? this.kraj.toJSON() : <any>undefined;
        if (Array.isArray(this.uslugi)) {
            data["uslugi"] = [];
            for (let item of this.uslugi)
                data["uslugi"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IKlient {
    id?: string;
    imie?: string | undefined;
    nazwisko?: string | undefined;
    nazwa?: string | undefined;
    pesel?: string | undefined;
    regon?: string | undefined;
    nip?: string | undefined;
    numerPaszportu?: string | undefined;
    numerTelefonu?: string | undefined;
    kodPocztowy?: string | undefined;
    miejscowosc?: string | undefined;
    ulica?: string | undefined;
    numerDomu?: string | undefined;
    numerLokalu?: string | undefined;
    idKraju?: string;
    email?: string | undefined;
    kraj?: Kraj | undefined;
    uslugi?: Usluga[] | undefined;
}

export class Kraj implements IKraj {
    id?: string;
    nazwaKraju?: string | undefined;
    skrot?: string | undefined;
    klienci?: Klient[] | undefined;

    constructor(data?: IKraj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwaKraju = _data["nazwaKraju"];
            this.skrot = _data["skrot"];
            if (Array.isArray(_data["klienci"])) {
                this.klienci = [] as any;
                for (let item of _data["klienci"])
                    this.klienci!.push(Klient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Kraj {
        data = typeof data === 'object' ? data : {};
        let result = new Kraj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwaKraju"] = this.nazwaKraju;
        data["skrot"] = this.skrot;
        if (Array.isArray(this.klienci)) {
            data["klienci"] = [];
            for (let item of this.klienci)
                data["klienci"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IKraj {
    id?: string;
    nazwaKraju?: string | undefined;
    skrot?: string | undefined;
    klienci?: Klient[] | undefined;
}

export class Misja implements IMisja {
    id?: string;
    nazwa?: string | undefined;
    opis?: string | undefined;
    idTypuMisji?: string;
    maksymalnaWysokoscLotu?: number;
    idStatusuMisji?: string;
    dataRozpoczecia?: Date;
    dataZakonczenia?: Date;
    idUslugi?: string;
    szerokoscGeograficzna?: number;
    dlugoscGeograficzna?: number;
    promien?: number;
    typMisji?: TypMisji | undefined;
    statusMisji?: StatusMisji | undefined;
    usluga?: Usluga | undefined;

    constructor(data?: IMisja) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
            this.opis = _data["opis"];
            this.idTypuMisji = _data["idTypuMisji"];
            this.maksymalnaWysokoscLotu = _data["maksymalnaWysokoscLotu"];
            this.idStatusuMisji = _data["idStatusuMisji"];
            this.dataRozpoczecia = _data["dataRozpoczecia"] ? new Date(_data["dataRozpoczecia"].toString()) : <any>undefined;
            this.dataZakonczenia = _data["dataZakonczenia"] ? new Date(_data["dataZakonczenia"].toString()) : <any>undefined;
            this.idUslugi = _data["idUslugi"];
            this.szerokoscGeograficzna = _data["szerokoscGeograficzna"];
            this.dlugoscGeograficzna = _data["dlugoscGeograficzna"];
            this.promien = _data["promien"];
            this.typMisji = _data["typMisji"] ? TypMisji.fromJS(_data["typMisji"]) : <any>undefined;
            this.statusMisji = _data["statusMisji"] ? StatusMisji.fromJS(_data["statusMisji"]) : <any>undefined;
            this.usluga = _data["usluga"] ? Usluga.fromJS(_data["usluga"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Misja {
        data = typeof data === 'object' ? data : {};
        let result = new Misja();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        data["opis"] = this.opis;
        data["idTypuMisji"] = this.idTypuMisji;
        data["maksymalnaWysokoscLotu"] = this.maksymalnaWysokoscLotu;
        data["idStatusuMisji"] = this.idStatusuMisji;
        data["dataRozpoczecia"] = this.dataRozpoczecia ? this.dataRozpoczecia.toISOString() : <any>undefined;
        data["dataZakonczenia"] = this.dataZakonczenia ? this.dataZakonczenia.toISOString() : <any>undefined;
        data["idUslugi"] = this.idUslugi;
        data["szerokoscGeograficzna"] = this.szerokoscGeograficzna;
        data["dlugoscGeograficzna"] = this.dlugoscGeograficzna;
        data["promien"] = this.promien;
        data["typMisji"] = this.typMisji ? this.typMisji.toJSON() : <any>undefined;
        data["statusMisji"] = this.statusMisji ? this.statusMisji.toJSON() : <any>undefined;
        data["usluga"] = this.usluga ? this.usluga.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMisja {
    id?: string;
    nazwa?: string | undefined;
    opis?: string | undefined;
    idTypuMisji?: string;
    maksymalnaWysokoscLotu?: number;
    idStatusuMisji?: string;
    dataRozpoczecia?: Date;
    dataZakonczenia?: Date;
    idUslugi?: string;
    szerokoscGeograficzna?: number;
    dlugoscGeograficzna?: number;
    promien?: number;
    typMisji?: TypMisji | undefined;
    statusMisji?: StatusMisji | undefined;
    usluga?: Usluga | undefined;
}

export class TypMisji implements ITypMisji {
    id?: string;
    nazwa?: string | undefined;
    misje?: Misja[] | undefined;

    constructor(data?: ITypMisji) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
            if (Array.isArray(_data["misje"])) {
                this.misje = [] as any;
                for (let item of _data["misje"])
                    this.misje!.push(Misja.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TypMisji {
        data = typeof data === 'object' ? data : {};
        let result = new TypMisji();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        if (Array.isArray(this.misje)) {
            data["misje"] = [];
            for (let item of this.misje)
                data["misje"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITypMisji {
    id?: string;
    nazwa?: string | undefined;
    misje?: Misja[] | undefined;
}

export class StatusMisji implements IStatusMisji {
    id?: string;
    nazwa?: string | undefined;
    misje?: Misja[] | undefined;

    constructor(data?: IStatusMisji) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nazwa = _data["nazwa"];
            if (Array.isArray(_data["misje"])) {
                this.misje = [] as any;
                for (let item of _data["misje"])
                    this.misje!.push(Misja.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StatusMisji {
        data = typeof data === 'object' ? data : {};
        let result = new StatusMisji();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nazwa"] = this.nazwa;
        if (Array.isArray(this.misje)) {
            data["misje"] = [];
            for (let item of this.misje)
                data["misje"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStatusMisji {
    id?: string;
    nazwa?: string | undefined;
    misje?: Misja[] | undefined;
}

export class MisjaDto implements IMisjaDto {
    nazwa?: string | undefined;
    opis?: string | undefined;
    idTypuMisji?: string;
    maksymalnaWysokoscLotu?: number;
    idStatusuMisji?: string;
    dataRozpoczecia?: number;
    dataZakonczenia?: number;
    szerokoscGeograficzna?: number;
    dlugoscGeograficzna?: number;
    promien?: number;

    constructor(data?: IMisjaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nazwa = _data["nazwa"];
            this.opis = _data["opis"];
            this.idTypuMisji = _data["idTypuMisji"];
            this.maksymalnaWysokoscLotu = _data["maksymalnaWysokoscLotu"];
            this.idStatusuMisji = _data["idStatusuMisji"];
            this.dataRozpoczecia = _data["dataRozpoczecia"];
            this.dataZakonczenia = _data["dataZakonczenia"];
            this.szerokoscGeograficzna = _data["szerokoscGeograficzna"];
            this.dlugoscGeograficzna = _data["dlugoscGeograficzna"];
            this.promien = _data["promien"];
        }
    }

    static fromJS(data: any): MisjaDto {
        data = typeof data === 'object' ? data : {};
        let result = new MisjaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nazwa"] = this.nazwa;
        data["opis"] = this.opis;
        data["idTypuMisji"] = this.idTypuMisji;
        data["maksymalnaWysokoscLotu"] = this.maksymalnaWysokoscLotu;
        data["idStatusuMisji"] = this.idStatusuMisji;
        data["dataRozpoczecia"] = this.dataRozpoczecia;
        data["dataZakonczenia"] = this.dataZakonczenia;
        data["szerokoscGeograficzna"] = this.szerokoscGeograficzna;
        data["dlugoscGeograficzna"] = this.dlugoscGeograficzna;
        data["promien"] = this.promien;
        return data; 
    }
}

export interface IMisjaDto {
    nazwa?: string | undefined;
    opis?: string | undefined;
    idTypuMisji?: string;
    maksymalnaWysokoscLotu?: number;
    idStatusuMisji?: string;
    dataRozpoczecia?: number;
    dataZakonczenia?: number;
    szerokoscGeograficzna?: number;
    dlugoscGeograficzna?: number;
    promien?: number;
}

export class UtworzUslugeCommand implements IUtworzUslugeCommand {
    dataPrzyjeciaZlecenia?: number;
    idKlienta?: string;
    idStatusuUslugi?: string;
    misje?: MisjaDto[] | undefined;

    constructor(data?: IUtworzUslugeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataPrzyjeciaZlecenia = _data["dataPrzyjeciaZlecenia"];
            this.idKlienta = _data["idKlienta"];
            this.idStatusuUslugi = _data["idStatusuUslugi"];
            if (Array.isArray(_data["misje"])) {
                this.misje = [] as any;
                for (let item of _data["misje"])
                    this.misje!.push(MisjaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UtworzUslugeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UtworzUslugeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataPrzyjeciaZlecenia"] = this.dataPrzyjeciaZlecenia;
        data["idKlienta"] = this.idKlienta;
        data["idStatusuUslugi"] = this.idStatusuUslugi;
        if (Array.isArray(this.misje)) {
            data["misje"] = [];
            for (let item of this.misje)
                data["misje"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUtworzUslugeCommand {
    dataPrzyjeciaZlecenia?: number;
    idKlienta?: string;
    idStatusuUslugi?: string;
    misje?: MisjaDto[] | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}